#!/bin/bash

# To use this script:
# sudo wget https://raw.githubusercontent.com/deforay/utility-scripts/master/php/switch-php -O /usr/local/bin/switch-php
# sudo chmod +x /usr/local/bin/switch-php
# sudo switch-php 7.4
# sudo switch-php 8.2

# Check if running as root
if [ "$EUID" -ne 0 ]; then
    echo "Please run as root."
    exit 1
fi

# Check if the OS is Ubuntu 20.04 or higher
check_ubuntu_version() {
    . /etc/os-release
    if [ "$ID" != "ubuntu" ]; then
        echo "This script is intended for Ubuntu."
        exit 1
    fi

    VERSION_ID=${VERSION_ID%.*} # Get the major version number
    if [ "$VERSION_ID" -lt 20 ]; then
        echo "This script requires Ubuntu 20.04 or higher."
        exit 1
    fi
}

check_ubuntu_version

# Check if the user provided a PHP version
if [ -z "$1" ]; then
    echo "Please provide a PHP version (e.g., 7.4, 8.0, 8.1, 8.2)"
    exit 1
fi

PHP_VERSION=$1

# Update and install necessary packages
apt-get update && apt-get upgrade -y && apt-get autoremove -y

dpkg --configure -a

apt-get install -y build-essential software-properties-common gnupg apt-transport-https ca-certificates lsb-release wget vim zip unzip curl acl snapd rsync git gdebi net-tools sed mawk magic-wormhole openssh-server libsodium-dev

# Add Ondřej Surý's PPA if it's not already added
if ! grep -q "ondrej/php" /etc/apt/sources.list /etc/apt/sources.list.d/*; then
    add-apt-repository ppa:ondrej/php -y
    apt-get update -y
fi

# Check if the PHP version is already installed
if ! command -v php$PHP_VERSION >/dev/null 2>&1; then
    echo "PHP $PHP_VERSION is not installed. Installing now..."

    # Install the requested PHP version and its core components
    apt-get install -y "php$PHP_VERSION" "libapache2-mod-php$PHP_VERSION"
else
    echo "PHP $PHP_VERSION is already installed."
fi

# Define the list of extensions to be installed
extensions=(
    "common"
    "cli"
    "json"
    "mysql"
    "pdo_mysql"
    "zip"
    "gd"
    "mbstring"
    "curl"
    "xml"
    "xmlrpc"
    "bcmath"
    "gmp"
    "intl"
    "imagick"
    "apcu"
    "opcache"
    "memcache"
    "memcached"
    "redis"
)

# Install required extensions if they are not already installed
for extension in "${extensions[@]}"; do
    if ! dpkg -l | grep -q "php$PHP_VERSION-$extension"; then
        echo "Installing php$PHP_VERSION-$extension..."
        # Check if the package is available before trying to install it
        if apt-cache search "php$PHP_VERSION-$extension" | grep -q "php$PHP_VERSION-$extension"; then
            apt-get install -y "php$PHP_VERSION-$extension" || {
                echo "Failed to install php$PHP_VERSION-$extension. Logging error and continuing."
                echo "Failed to install php$PHP_VERSION-$extension" >>/var/log/php-switch-error.log
            }
        else
            echo "Package php$PHP_VERSION-$extension not found in the repository. Skipping."
            echo "Package php$PHP_VERSION-$extension not found" >>/var/log/php-switch-error.log
        fi
    else
        echo "php$PHP_VERSION-$extension is already installed."
    fi
done

# Enable the requested PHP version
echo "Enabling PHP $PHP_VERSION"
# Disable the currently enabled PHP version if it's not the target version
enabled_php_version=$(ls /etc/apache2/mods-enabled | grep -oP '^php\d\.\d')

if [ -n "$enabled_php_version" ] && [ "$enabled_php_version" != "php$PHP_VERSION" ]; then
    echo "Disabling PHP $enabled_php_version"
    a2dismod $enabled_php_version
else
    echo "PHP $enabled_php_version is already the target version."
fi
a2enmod php$PHP_VERSION

update-alternatives --set php "/usr/bin/php$PHP_VERSION"
update-alternatives --set phar "/usr/bin/phar$PHP_VERSION"
update-alternatives --set phar.phar "/usr/bin/phar.phar$PHP_VERSION"

CLI_PHP_INI="/etc/php/$PHP_VERSION/cli/php.ini"
if ! grep -q "apc.enable_cli=1" "$CLI_PHP_INI"; then
    echo "apc.enable_cli=1" | sudo tee -a "$CLI_PHP_INI"
fi


# Restart Apache to apply changes
service apache2 restart || {
    echo "Failed to restart Apache. Please check the configuration."
    exit 1
}

echo "Switched to PHP $PHP_VERSION"
echo "PHP CLI version switched"


# Modify php.ini as needed
echo "Modifying PHP configurations..."

# Get total RAM and calculate 75%
TOTAL_RAM=$(awk '/MemTotal/ {print $2}' /proc/meminfo) || exit 1
RAM_75_PERCENT=$((TOTAL_RAM * 3 / 4 / 1024))M || RAM_75_PERCENT=1G

desired_error_reporting="error_reporting = E_ALL & ~E_DEPRECATED & ~E_STRICT & ~E_NOTICE & ~E_WARNING"
desired_post_max_size="post_max_size = 1G"
desired_upload_max_filesize="upload_max_filesize = 1G"
desired_memory_limit="memory_limit = $RAM_75_PERCENT"
desired_strict_mode="session.use_strict_mode = 1"
desired_max_execution_time="max_execution_time = 300"

for phpini in /etc/php/$PHP_VERSION/apache2/php.ini /etc/php/$PHP_VERSION/cli/php.ini; do
    awk -v er="$desired_error_reporting" -v pms="$desired_post_max_size" \
        -v umf="$desired_upload_max_filesize" -v ml="$desired_memory_limit" \
        -v dsm="$desired_strict_mode" -v met="$desired_max_execution_time" \
        '{
        if ($0 ~ /^error_reporting[[:space:]]*=/) {print ";" $0 "\n" er; next}
        if ($0 ~ /^post_max_size[[:space:]]*=/) {print ";" $0 "\n" pms; next}
        if ($0 ~ /^upload_max_filesize[[:space:]]*=/) {print ";" $0 "\n" umf; next}
        if ($0 ~ /^memory_limit[[:space:]]*=/) {print ";" $0 "\n" ml; next}
        if ($0 ~ /^session.use_strict_mode[[:space:]]*=/) {print ";" $0 "\n" dsm; next}
        if ($0 ~ /^max_execution_time[[:space:]]*=/) {print ";" $0 "\n" met; next}
        print $0
    }' $phpini >temp.ini && mv temp.ini $phpini
done


# Composer Setup
echo "Checking for Composer..."
if command -v composer &>/dev/null; then
    echo "Composer is already installed. Updating..."
    composer self-update
else
    echo "Installing Composer..."
    php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
    HASH=$(wget -q -O - https://composer.github.io/installer.sig)
    echo "Installer hash: $HASH"
    php -r "if (hash('SHA384', file_get_contents('composer-setup.php')) !== '$HASH') { unlink('composer-setup.php'); echo 'Invalid installer' . PHP_EOL; exit(1); }"
    php composer-setup.php
    if [ $? -ne 0 ]; then
        echo "Failed to install Composer."
    fi
    php -r "unlink('composer-setup.php');"
    mv composer.phar /usr/local/bin/composer
fi



# Restart Apache to apply changes
service apache2 restart || {
    echo "Failed to restart Apache. Please check the configuration."
    exit 1
}
